name: ðŸš€ CI/CD â€” Unified Stable & Nightly Pipeline (v4.2.0)

on:
  push:
    branches:
      - master
      - main
    tags:
      - 'v*.*.*'
  pull_request:
  workflow_dispatch:

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  PHP_VERSION: '8.3'
  KEEP_NIGHTLY: 7

permissions:
  contents: write

jobs:
  quality:
    name: ðŸ§© Quality Gate (PHPUnit + Static Analysis + Audit)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Validate YAML
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y yamllint
          yamllint -f parsable -d "{extends: default, rules: {line-length: disable, document-start: disable}}" .github/workflows/
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: xdebug
          extensions: mbstring, json, intl, pdo, xml, dom, curl, zip
      - run: composer install --no-interaction --no-progress
      - run: vendor/bin/phpunit --testdox --colors=always --coverage-clover build/coverage.xml --coverage-html build/coverage-html
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.sha }}
          path: build/coverage-html

  release:
    name: ðŸš€ Release Builder (Stable & Nightly)
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      contents: write
    if: ${{ github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') }}
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: shivammathur/setup-php@v2
        with: { php-version: ${{ env.PHP_VERSION }} }

      - name: Determine release tag
        id: tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            DATE=$(date +'%Y-%m-%d')
            COUNT=$(git tag --list "nightly-${DATE}-build-*" | wc -l | tr -d ' ')
            TAG="nightly-${DATE}-build-$((COUNT + 1))"
            git tag -f "$TAG"; git push origin "refs/tags/$TAG" --force
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - run: composer install --no-interaction --no-progress
      - run: |
          mkdir -p dist var/export
          php bin/foundation foundation:api:openapi:generate -f json -o var/export/openapi.json || true
          php bin/foundation foundation:api:openapi:generate -f yaml -o var/export/openapi.yaml || true
          zip -r "dist/${{ env.PROJECT_NAME }}-${{ steps.tag.outputs.tag }}.zip" src/ bin/ composer.json LICENSE README.md CHANGELOG.md || true

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: object-foundation-${{ steps.tag.outputs.tag }}
          path: |
            dist/object-foundation-${{ steps.tag.outputs.tag }}.zip
            var/export/openapi.json
            var/export/openapi.yaml
          retention-days: 30

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "${{ env.PROJECT_NAME }} ${{ steps.tag.outputs.tag }}"
          body: "Automated release from CI/CD."
          files: dist/object-foundation-${{ steps.tag.outputs.tag }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs:
    name: ðŸ“˜ Deploy Docs (OpenAPI + phpDocumentor)
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: shivammathur/setup-php@v2
        with: { php-version: ${{ env.PHP_VERSION }} }
      - run: composer install --no-interaction --no-progress
      - uses: actions/download-artifact@v4
        with:
          name: object-foundation-${{ needs.release.outputs.tag }}
          path: ./public/api/${{ needs.release.outputs.tag }}
      - name: Generate phpDocumentor
        run: |
          DEST="./public/dev/${{ needs.release.outputs.tag }}"
          mkdir -p "$DEST"
          if [ -f vendor/bin/phpdoc ]; then
            vendor/bin/phpdoc -d src -t "$DEST"
          else
            echo "<html><body><h1>Docs unavailable</h1></body></html>" > "$DEST/index.html"
          fi
      - uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
          destination_dir: .

  publish-latest:
    name: ðŸ“¦ Publish Latest ZIP to GitHub Pages
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: object-foundation-${{ needs.release.outputs.tag }}
          path: ./downloads/${{ needs.release.outputs.tag }}
      - name: Copy latest zip
        run: |
          mkdir -p downloads
          LATEST="downloads/latest.zip"
          cp "./downloads/${{ needs.release.outputs.tag }}/dist/object-foundation-${{ needs.release.outputs.tag }}.zip" "$LATEST" 2>/dev/null || cp "./downloads/${{ needs.release.outputs.tag }}/object-foundation-${{ needs.release.outputs.tag }}.zip" "$LATEST"
          echo "Updated $LATEST"
      - uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./downloads
          publish_branch: gh-pages
          destination_dir: downloads
