name: 🚀 CI/CD — Unified Stable & Nightly Pipeline (v4.2.1)

on:
  push:
    branches:
      - master
      - main
    tags:
      - 'v*.*.*'
  pull_request:
  workflow_dispatch:

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  PHP_VERSION: '8.3'
  KEEP_NIGHTLY: 7

permissions:
  contents: write

jobs:
  quality:
    name: 🧩 Quality Gate (Secrets + Atomicity + Tests + Static Analysis)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: xdebug
          extensions: mbstring, json, intl, pdo, xml, dom, curl, zip

      # ⚡ Cache APT packages (yamllint, system tools)
      - name: ⚡ Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/**/*.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # ⚡ Cache Composer dependencies
      - name: ⚡ Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # ⚡ Cache PHPUnit and coverage data
      - name: ⚡ Cache PHPUnit cache and coverage
        uses: actions/cache@v4
        with:
          path: |
            .phpunit.cache
            build/coverage.xml
            build/coverage-html
          key: ${{ runner.os }}-phpunit-${{ hashFiles('phpunit.xml.dist') }}
          restore-keys: |
            ${{ runner.os }}-phpunit-

      # 🔒 Secret Scan (soft in branches, strict in releases)
      - name: 🔒 Gitleaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          config-path: .gitleaks.toml
          fail: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ⚛️ Atomicity Integrity Check
      - name: ⚛️ Atomicity Integrity Check
        run: composer test:atomicity

      # 📦 Composer install
      - name: 📦 Install dependencies
        run: composer install --no-interaction --no-progress

      # 🧩 Validate PHPUnit XML configuration
      - name: 🧩 Validate phpunit.xml.dist
        run: |
          if ! command -v xmllint &> /dev/null; then
            sudo apt-get update -qq && sudo apt-get install -y libxml2-utils
          fi

          echo "Validating phpunit.xml.dist..."
          xmllint --noout phpunit.xml.dist 2> xmllint-report.txt || true

          if grep -q "error" xmllint-report.txt || grep -q "Element" xmllint-report.txt; then
            echo "❌ XML validation issues detected:" >> $GITHUB_STEP_SUMMARY
            cat xmllint-report.txt >> $GITHUB_STEP_SUMMARY
            echo "Validation failed"
            exit 1
          else
            echo "✅ phpunit.xml.dist validation OK" >> $GITHUB_STEP_SUMMARY
          fi

      # 🧪 PHPUnit (with coverage)
      - name: 🧪 PHPUnit
        run: |
          mkdir -p build/coverage-html
          vendor/bin/phpunit --testdox --colors=always \
            --coverage-clover build/coverage.xml \
            --coverage-html build/coverage-html || (echo "❌ PHPUnit failed"; exit 1)

      # 📤 Upload coverage artifacts
      - name: 📤 Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.sha }}
          path: |
            build/coverage.xml
            build/coverage-html
          retention-days: 14

      # 🔍 PHPStan
      - name: 🔍 PHPStan (static analysis)
        run: |
          if [ -f vendor/bin/phpstan ]; then
            vendor/bin/phpstan analyse src --level=max
          fi

      # 🎨 PHP-CS-Fixer
      - name: 🎨 PHP-CS-Fixer (dry-run)
        run: |
          if [ -f vendor/bin/php-cs-fixer ]; then
            vendor/bin/php-cs-fixer fix --dry-run --verbose
          fi

      # 🔐 Composer audit
      - name: 🔐 Composer Security Audit
        run: composer audit --no-interaction

      # 🧹 Cleanup old caches (post-success maintenance)
      - name: 🧹 Cleanup old caches
        if: ${{ success() }}
        run: |
          echo "🧹 Cleaning up old caches..."
          sudo rm -rf /var/cache/apt/archives/*.deb || true
          rm -rf ~/.composer/cache/files/* || true
          rm -rf .phpunit.cache || true
          echo "✅ Cache cleanup completed"

  release:
    name: 🚀 Release Builder (Stable & Nightly)
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      contents: write
    if: ${{ github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') }}
    outputs:
      tag: ${{ steps.tag.outputs.tag }}

    steps:
      - name: 🧾 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, json, intl, pdo, xml, dom, curl, zip

      - name: 🧮 Determine release tag
        id: tag
        run: |
          if [["${GITHUB_REF}" == refs/tags/*]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            TYPE="stable"
          else
            DATE=$(date +'%Y-%m-%d')
            COUNT=$(git tag --list "nightly-${DATE}-build-*" | wc -l | tr -d ' ')
            BUILD=$((COUNT + 1))
            TAG="nightly-${DATE}-build-${BUILD}"
            TYPE="nightly"
            git tag -f "${TAG}"
            git push origin "refs/tags/${TAG}" --force
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "type=${TYPE}" >> $GITHUB_OUTPUT

      - name: 📦 Install dependencies
        run: composer install --no-interaction --no-progress

      - name: 🧠 Generate OpenAPI specs
        run: |
          mkdir -p var/export
          php bin/foundation foundation:api:openapi:generate -f json -o var/export/openapi.json || true
          php bin/foundation foundation:api:openapi:generate -f yaml -o var/export/openapi.yaml || true

      - name: 🧱 Build distributable
        run: |
          mkdir -p dist
          ZIP_NAME="object-foundation-${{ steps.tag.outputs.tag }}.zip"
          zip -r "dist/${ZIP_NAME}" src/ bin/ composer.json LICENSE README.md CHANGELOG.md phpunit.xml.dist docs/ 2>/dev/null || true

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: object-foundation-${{ steps.tag.outputs.tag }}
          path: |
            dist/object-foundation-${{ steps.tag.outputs.tag }}.zip
            var/export/openapi.json
            var/export/openapi.yaml
          retention-days: 30

      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "Object Foundation ${{ steps.tag.outputs.tag }}"
          body: "Automated release via unified CI/CD."
          files: dist/object-foundation-${{ steps.tag.outputs.tag }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs:
    name: 📘 Deploy Docs (OpenAPI + phpDocumentor)
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🧾 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: 📦 Install dependencies
        run: composer install --no-interaction --no-progress

      - name: 📥 Download artifact
        uses: actions/download-artifact@v4
        with:
          name: object-foundation-${{ needs.release.outputs.tag }}
          path: ./public/api/${{ needs.release.outputs.tag }}

      - name: 🌐 Prepare Swagger UI
        run: |
          DEST="./public/api/${{ needs.release.outputs.tag }}"
          mkdir -p "$DEST"
          if [-f "$DEST/openapi.json"]; then
            cat > "$DEST/index.html" <<'HTML'
            <!doctype html>
            <html><head><meta charset="utf-8"><title>API Docs</title>
            <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist@5/swagger-ui.css" /></head>
            <body><div id="swagger-ui"></div>
            <script src="https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js"></script>
            <script>window.onload=()=>{SwaggerUIBundle({url:'openapi.json',dom_id:'#swagger-ui'})};</script>
            </body></html>
            HTML
          fi

      - name: 📚 Generate phpDocumentor
        run: |
          DEST="./public/dev/${{ needs.release.outputs.tag }}"
          mkdir -p "$DEST"
          if [-f vendor/bin/phpdoc]; then
            vendor/bin/phpdoc -d src -t "$DEST"
          else
            echo "<html><body><h1>Docs unavailable</h1></body></html>" > "$DEST/index.html"
          fi

      - name: 🚀 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
          destination_dir: .

  publish-latest:
    name: 📦 Publish Latest ZIP to GitHub Pages
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🧾 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: object-foundation-${{ needs.release.outputs.tag }}
          path: ./downloads/${{ needs.release.outputs.tag }}

      - name: 📁 Copy latest zip
        run: |
          mkdir -p downloads
          LATEST="downloads/latest.zip"
          SRC="./downloads/${{ needs.release.outputs.tag }}/dist/object-foundation-${{ needs.release.outputs.tag }}.zip"
          if [-f "$SRC"]; then
            cp "$SRC" "$LATEST"
          else
            cp "./downloads/${{ needs.release.outputs.tag }}/object-foundation-${{ needs.release.outputs.tag }}.zip" "$LATEST"
          fi
          echo "Updated $LATEST"

      - name: 🚀 Publish latest.zip to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./downloads
          publish_branch: gh-pages
          destination_dir: downloads
