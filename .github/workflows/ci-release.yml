name: üöÄ CI Release ‚Äî Stable & Nightly Builds (Auto Cleanup & Increment)

on:
  workflow_run:
    workflows: ["üßπ Lint & Static Analysis", "üß™ CI Tests"]
    types: [completed]
  push:
    branches: [ master ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  PHP_VERSION: '8.3'
  KEEP_NIGHTLY: 7

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    name: Build, Release & Docs
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/master')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event.workflow_run.conclusion == 'success')

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, json, intl, pdo, xml, dom, curl, zip

      # --- DETERMINE TAG (stable vs nightly) ---
      - name: üß© Determine release tag
        id: tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            echo "Stable release detected: ${TAG}"
          else
            DATE=$(date +'%Y-%m-%d')
            COUNT=$(git tag --list "nightly-${DATE}-build-*" | wc -l | tr -d ' ')
            BUILD=$((COUNT + 1))
            TAG="nightly-${DATE}-build-${BUILD}"
            echo "Creating nightly tag: ${TAG}"
            git tag -f "${TAG}"
            git push origin "refs/tags/${TAG}" --force
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: üì¶ Install dependencies
        run: composer install --no-interaction --no-progress

      - name: üîê Composer audit
        run: |
          composer audit --no-interaction || (echo "‚ùå Vulnerabilities found!" >> $GITHUB_STEP_SUMMARY && exit 1)
          echo "‚úÖ composer audit passed" >> $GITHUB_STEP_SUMMARY

      # --- BUILD ZIP ---
      - name: üß± Build distributable archive
        run: |
          mkdir -p dist
          ZIP_NAME="${PROJECT_NAME}-${{ steps.tag.outputs.tag }}.zip"
          zip -r "dist/${ZIP_NAME}" src/ bin/ composer.json LICENSE README.md CHANGELOG.md phpunit.xml.dist docs/ 2>/dev/null || true
          echo "‚úÖ Archive created: dist/${ZIP_NAME}"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ steps.tag.outputs.tag }}
          path: dist/${{ env.PROJECT_NAME }}-${{ steps.tag.outputs.tag }}.zip
          retention-days: 30

      # --- GENERATE RELEASE NOTES ---
      - name: üß† Generate release notes from template
        run: |
          TAG=${{ steps.tag.outputs.tag }}
          DATE=$(date +'%Y-%m-%d')
          mkdir -p .github
          if [ -f ".github/release_template.md" ]; then
            export VERSION="$TAG"
            export RELEASE_DATE="$DATE"
            envsubst < .github/release_template.md > RELEASE_NOTES.md
          else
            echo "# üß† ${PROJECT_NAME} ‚Äî ${TAG}" > RELEASE_NOTES.md
            echo "_Auto-generated on ${DATE}_" >> RELEASE_NOTES.md
          fi
          echo "‚úÖ RELEASE_NOTES.md generated"

      # --- SAVE RELEASE DOC ---
      - name: üßæ Save release notes to docs/releases
        run: |
          mkdir -p docs/releases
          cp RELEASE_NOTES.md "docs/releases/${{ steps.tag.outputs.tag }}.md"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "docs/releases/${{ steps.tag.outputs.tag }}.md"
          git commit -m "docs: add release notes for ${{ steps.tag.outputs.tag }}" || echo "No new commit"
          git push origin HEAD:master || echo "No push permissions (skipped)"

      # --- CREATE GITHUB RELEASE ---
      - name: üè∑Ô∏è Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "${{ env.PROJECT_NAME }} ${{ steps.tag.outputs.tag }}"
          body_path: RELEASE_NOTES.md
          files: dist/${{ env.PROJECT_NAME }}-${{ steps.tag.outputs.tag }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- PACKAGIST SYNC (stable only) ---
      - name: üîÑ Trigger Packagist update
        if: startsWith(steps.tag.outputs.tag, 'v')
        env:
          PACKAGIST_USERNAME: ${{ secrets.PACKAGIST_USERNAME }}
          PACKAGIST_TOKEN: ${{ secrets.PACKAGIST_TOKEN }}
        run: |
          curl -XPOST -H 'content-type:application/json' \
            -d "{\"repository\":{\"url\":\"https://github.com/${GITHUB_REPOSITORY}\"}}" \
            "https://packagist.org/api/update-package?username=${PACKAGIST_USERNAME}&apiToken=${PACKAGIST_TOKEN}"
          echo "‚úÖ Packagist update triggered"

      # --- NIGHTLY CLEANUP ---
      - name: üßπ Cleanup old nightly builds
        if: "!startsWith(steps.tag.outputs.tag, 'v')"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üßπ Checking for old nightly tags..."
          NIGHTLY_TAGS=$(git tag --list 'nightly-*' --sort=-creatordate)
          COUNT=$(echo "$NIGHTLY_TAGS" | wc -l)
          KEEP=${KEEP_NIGHTLY:-7}

          if [ "$COUNT" -gt "$KEEP" ]; then
            REMOVE_COUNT=$((COUNT - KEEP))
            REMOVE_TAGS=$(echo "$NIGHTLY_TAGS" | tail -n "$REMOVE_COUNT")
            echo "Found $COUNT nightly builds. Keeping last $KEEP, removing $REMOVE_COUNT..."
            for TAG in $REMOVE_TAGS; do
              echo "‚ùå Deleting old nightly tag: $TAG"
              git push --delete origin "$TAG" || true
              gh release delete "$TAG" -y || true
            done
            echo "‚úÖ Cleanup complete."
          else
            echo "üü¢ Only $COUNT nightly builds found (limit $KEEP) ‚Äî nothing to clean."
          fi

  deploy-docs:
    needs: release
    runs-on: ubuntu-latest
    name: üìò Deploy Docs
    permissions:
      contents: write

    steps:
      - name: üßæ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: üì¶ Install dependencies
        run: composer install --no-interaction --no-progress

      - name: üì• Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ steps.tag.outputs.tag }}
          path: ./public/api/${{ steps.tag.outputs.tag }}

      - name: üåê Prepare Swagger UI (if OpenAPI exists)
        run: |
          DEST="./public/api/${{ steps.tag.outputs.tag }}"
          mkdir -p "$DEST"
          if [ -f "$DEST/openapi.json" ]; then
            cat > "$DEST/index.html" <<'HTML'
            <!doctype html>
            <html>
            <head>
              <meta charset="utf-8">
              <title>API Docs</title>
              <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist@5/swagger-ui.css" />
            </head>
            <body>
              <div id="swagger-ui"></div>
              <script src="https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js"></script>
              <script>
                window.onload = () => {
                  SwaggerUIBundle({ url: 'openapi.json', dom_id: '#swagger-ui' });
                };
              </script>
            </body>
            </html>
            HTML
            echo "‚úÖ Swagger UI ready"
          else
            echo "‚ÑπÔ∏è No OpenAPI spec found ‚Äî skipping Swagger UI"
          fi

      - name: üìö Generate Developer Docs
        run: |
          DEST="./public/dev/${{ steps.tag.outputs.tag }}"
          mkdir -p "$DEST"
          if [ -f vendor/bin/phpdoc ]; then
            vendor/bin/phpdoc -d src -t "$DEST"
            echo "‚úÖ Developer docs generated"
          else
            echo "<html><body><h1>Docs unavailable</h1></body></html>" > "$DEST/index.html"
          fi

      - name: üöÄ Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
          destination_dir: .

      - name: üîÅ Update latest alias
        run: |
          git clone --depth 1 --branch gh-pages "https://github.com/${{ github.repository }}" gh-pages
          cd gh-pages
          rm -rf api/latest dev/latest
          mkdir -p api/latest dev/latest
          cp -r api/${{ steps.tag.outputs.tag }}/* api/latest/ 2>/dev/null || true
          cp -r dev/${{ steps.tag.outputs.tag }}/* dev/latest/ 2>/dev/null || true
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add api/latest dev/latest
          git commit -m "update latest aliases to ${{ steps.tag.outputs.tag }}" || echo "no changes"
          git push origin gh-pages
