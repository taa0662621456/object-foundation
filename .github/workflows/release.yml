name: Release v2.x

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, json, intl, pdo, xml, dom, curl, zip

      - name: Install dependencies
        run: composer install --no-interaction --no-progress

      - name: Run tests
        run: vendor/bin/phpunit --testdox --colors=always

      - name: Generate OpenAPI spec
        run: |
          php bin/foundation foundation:api:openapi:generate -f json -o var/export/openapi.json
          php bin/foundation foundation:api:openapi:generate -f yaml -o var/export/openapi.yaml

      - name: Build distributable zip
        run: |
          mkdir -p dist
          ZIP_NAME="object-foundation-${GITHUB_REF_NAME}.zip"
          zip -r "dist/${ZIP_NAME}" src/ bin/ composer.json LICENSE README.md CHANGELOG.md ROADMAP.md VISION.md phpunit.xml.dist .github/workflows/release.yml docs/ || echo "No docs folder"
          echo "✅ Created dist/${ZIP_NAME}"

      - name: Check distributable content
        run: |
          ZIP_FILE="dist/object-foundation-${GITHUB_REF_NAME}.zip"
          echo "🔍 Verifying contents of $ZIP_FILE"
          unzip -l "$ZIP_FILE" | tee dist/zip_contents.txt

          REQUIRED=("src/" "composer.json" "README.md" "LICENSE")
          for ITEM in "${REQUIRED[@]}"; do
            if ! unzip -l "$ZIP_FILE" | grep -q "$ITEM"; then
              echo "❌ Missing required file or folder: $ITEM"
              exit 1
            fi
          done

          echo "✅ All required items are present in $ZIP_FILE"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: object-foundation-${{ github.ref_name }}
          path: |
            dist/object-foundation-${{ github.ref_name }}.zip
            var/export/openapi.json
            var/export/openapi.yaml
          retention-days: 30

      - name: Update changelog date
        run: |
          TAG=${GITHUB_REF_NAME}
          DATE=$(date +'%Y-%m-%d')
          sed -i "s/## $TAG.*/## $TAG - $DATE/" CHANGELOG.md

      - name: Post-release: create next unreleased section
        run: |
          TAG=${GITHUB_REF_NAME}
          NEW_HEADER="## vNEXT - unreleased
### 🆕 Added
- (placeholder)

### ♻️ Changed
- (placeholder)

### 🪲 Fixed
- (placeholder)

### ⚡ Improved
- (placeholder)

---
"
          TEMP_FILE=$(mktemp)
          { echo -e "$NEW_HEADER"; cat CHANGELOG.md; } > "$TEMP_FILE"
          mv "$TEMP_FILE" CHANGELOG.md
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "chore: add unreleased section after $TAG"
          git push || echo "No push (detached head)"

      - name: Generate RELEASE_NOTES.md from CHANGELOG
        run: |
          TAG=${GITHUB_REF_NAME}
          awk "/## $TAG/{flag=1;next}/^## /{flag=0}flag" CHANGELOG.md > RELEASE_NOTES.md
          if [ ! -s RELEASE_NOTES.md ]; then
            echo "Release notes for $TAG" > RELEASE_NOTES.md
          fi

      - name: Format RELEASE_NOTES.md for GitHub
        run: |
          TAG=${GITHUB_REF_NAME}
          TITLE="# 🧠 Object Foundation — $TAG"
          DATE=$(date +'%Y-%m-%d')
          TEMP_FILE=$(mktemp)
          {
            echo "$TITLE"
            echo ""
            echo "_Auto-generated on $DATE_"
            echo ""
            echo "🚀 **This release was built and published automatically via CI/CD.**"
            echo ""
            cat RELEASE_NOTES.md
          } > "$TEMP_FILE"
          mv "$TEMP_FILE" RELEASE_NOTES.md

      - name: Generate short release summary
        id: summary
        run: |
          TAG=${GITHUB_REF_NAME}
          SUMMARY=$(awk '/### 🆕 Added/{flag=1;next}/^### /{flag=0}flag' CHANGELOG.md | head -n 1 | sed 's/^- *//')
          if [ -z "$SUMMARY" ]; then
            SUMMARY="Automated release for $TAG"
          fi
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Object Foundation ${{ github.ref_name }} — ${{ steps.summary.outputs.summary }}
          body_path: RELEASE_NOTES.md
          files: |
            var/export/openapi.json
            var/export/openapi.yaml
            dist/object-foundation-${{ github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}

      - name: Trigger Packagist update
        run: |
          curl -XPOST -H 'content-type:application/json'           -d '{"repository":{"url":"https://github.com/${{ github.repository }}"}}'           https://packagist.org/api/update-package?username=${{ secrets.PACKAGIST_USERNAME }}&apiToken=${{ secrets.PACKAGIST_TOKEN }}
