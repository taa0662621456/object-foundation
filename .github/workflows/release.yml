name: Release v2.x with Docs Deploy

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- YAML VALIDATION ---
      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-cache-${{ hashFiles('.github/workflows/**/*.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-cache-

      - name: Setup YAML validator
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y yamllint

      - name: Validate workflow YAMLs
        run: |
          echo "🔍 Validating YAML files..."
          yamllint -f parsable -d "{extends: default, rules: {line-length: disable, document-start: disable}}" .github/workflows/ | tee yamllint-report.txt
          if grep -q "error" yamllint-report.txt; then
            echo "❌ YAML syntax errors found" >> $GITHUB_STEP_SUMMARY
            cat yamllint-report.txt >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ YAML syntax OK" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload yamllint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: yamllint-report-release
          path: yamllint-report.txt
          retention-days: 7

      # --- COMPOSER VALIDATION & AUDIT ---
      - name: Validate composer.json
        run: |
          echo "🔍 Validating composer.json..."
          composer validate --strict
          echo "✅ composer.json validation passed" >> $GITHUB_STEP_SUMMARY

      - name: Composer audit (security check)
        run: |
          echo "🔐 Running composer audit..."
          composer audit --no-interaction || (echo "❌ Vulnerabilities found!" >> $GITHUB_STEP_SUMMARY && exit 1)
          echo "✅ composer audit passed (no vulnerabilities)" >> $GITHUB_STEP_SUMMARY

      # --- PHP BUILD & RELEASE ---
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, json, intl, pdo, xml, dom, curl, zip

      - name: Install dependencies
        run: composer install --no-interaction --no-progress

      - name: Run tests (non-blocking)
        id: phpunit
        continue-on-error: true
        run: |
          echo "🧪 Running PHPUnit tests..."
          vendor/bin/phpunit --no-coverage || echo "⚠️ Some tests failed"

      - name: Mark release type
        id: release_type
        run: |
          if [ "${{ steps.phpunit.outcome }}" = "failure" ]; then
            echo "type=PREVIEW" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "⚠️ Tests failed — marking as PREVIEW release"
          else
            echo "type=STABLE" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "✅ All tests passed — marking as STABLE release"
          fi

      - name: Generate OpenAPI spec
        run: |
          mkdir -p var/export
          php bin/foundation foundation:api:openapi:generate -f json -o var/export/openapi.json
          php bin/foundation foundation:api:openapi:generate -f yaml -o var/export/openapi.yaml

      - name: Build distributable zip
        run: |
          mkdir -p dist
          ZIP_NAME="object-foundation-${GITHUB_REF_NAME}.zip"
          zip -r "dist/${ZIP_NAME}" \
            src/ bin/ composer.json LICENSE README.md CHANGELOG.md ROADMAP.md VISION.md phpunit.xml.dist .github/workflows/release.yml docs/ \
            || echo "⚠️ No docs folder found"
          echo "✅ Created dist/${ZIP_NAME}"

      - name: Check distributable content
        run: |
          ZIP_FILE="dist/object-foundation-${GITHUB_REF_NAME}.zip"
          echo "🔍 Verifying contents of $ZIP_FILE"
          unzip -l "$ZIP_FILE" | tee dist/zip_contents.txt
          REQUIRED=("src/" "composer.json" "README.md" "LICENSE")
          for ITEM in "${REQUIRED[@]}"; do
            if ! unzip -l "$ZIP_FILE" | grep -q "$ITEM"; then
              echo "❌ Missing required file or folder: $ITEM"
              exit 1
            fi
          done
          echo "✅ All required items are present in $ZIP_FILE"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: object-foundation-${{ github.ref_name }}
          path: |
            dist/object-foundation-${{ github.ref_name }}.zip
            var/export/openapi.json
            var/export/openapi.yaml
          retention-days: 30

      - name: Update changelog date
        run: |
          TAG=${GITHUB_REF_NAME}
          DATE=$(date +'%Y-%m-%d')
          if grep -q "## $TAG" CHANGELOG.md; then
            sed -i "s/## $TAG.*/## $TAG - $DATE/" CHANGELOG.md
          fi

      - name: Generate RELEASE_NOTES.md from CHANGELOG
        run: |
          TAG=${GITHUB_REF_NAME}
          awk "/## $TAG/{flag=1;next}/^## /{flag=0}flag" CHANGELOG.md > RELEASE_NOTES.md
          if [ ! -s RELEASE_NOTES.md ]; then
            echo "Release notes for $TAG" > RELEASE_NOTES.md
          fi
          if [ "${{ steps.release_type.outputs.type }}" = "PREVIEW" ]; then
            echo -e "\n⚠️ This is a PREVIEW build — some tests failed in CI." >> RELEASE_NOTES.md
          fi
          echo "✅ RELEASE_NOTES.md prepared"

      - name: Commit updated changelog and notes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md RELEASE_NOTES.md
          if ! git diff --cached --quiet; then
            git commit -m "chore: update changelog and release notes for ${GITHUB_REF_NAME}"
            git push origin HEAD:main || echo "⚠️ Push to main failed (likely permissions)"
          else
            echo "No changes to commit"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Object Foundation ${{ github.ref_name }} (${{ steps.release_type.outputs.type }})
          body_path: RELEASE_NOTES.md
          prerelease: ${{ steps.release_type.outputs.is_prerelease }}
          files: |
            var/export/openapi.json
            var/export/openapi.yaml
            dist/object-foundation-${{ github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Packagist update
        if: ${{ env.PACKAGIST_USERNAME && env.PACKAGIST_TOKEN }}
        env:
          PACKAGIST_USERNAME: ${{ secrets.PACKAGIST_USERNAME }}
          PACKAGIST_TOKEN: ${{ secrets.PACKAGIST_TOKEN }}
        run: |
          echo "🔄 Triggering Packagist update..."
          curl -XPOST -H 'content-type:application/json' \
            -d "{\"repository\":{\"url\":\"https://github.com/${GITHUB_REPOSITORY}\"}}" \
            "https://packagist.org/api/update-package?username=${PACKAGIST_USERNAME}&apiToken=${PACKAGIST_TOKEN}"
          echo "✅ Packagist update triggered"

  deploy-docs:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- YAML VALIDATION ---
      - name: Setup YAML validator
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y yamllint

      - name: Validate workflow YAMLs
        run: |
          echo "🔍 Validating YAML files..."
          yamllint -f parsable -d "{extends: default, rules: {line-length: disable, document-start: disable}}" .github/workflows/ | tee yamllint-report.txt
          if grep -q "error" yamllint-report.txt; then
            echo "❌ YAML syntax errors found" >> $GITHUB_STEP_SUMMARY
            cat yamllint-report.txt >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ YAML syntax OK" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload yamllint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: yamllint-report-deploy-docs
          path: yamllint-report.txt
          retention-days: 7

      # --- DOCS DEPLOY ---
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: object-foundation-${{ github.ref_name }}
          path: ./public/api

      - name: Prepare Swagger UI
        run: |
          mkdir -p ./public/api
          cat > ./public/api/index.html <<'HTML'
          <!doctype html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Object Foundation API Docs</title>
            <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist@5/swagger-ui.css" />
          </head>
          <body>
            <div id="swagger-ui"></div>
            <script src="https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js"></script>
            <script>
              window.onload = () => {
                window.ui = SwaggerUIBundle({
                  url: 'openapi.json',
                  dom_id: '#swagger-ui',
                });
              };
            </script>
          </body>
          </html>
          HTML
          echo "✅ Swagger UI prepared"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
          destination_dir: api/${{ github.ref_name }}
